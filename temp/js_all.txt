=====================public/js/cities.js=======================

// ----------------------------------------------
// RapidStay - Í≥µÌÜµ ÎèÑÏãú Î™©Î°ù (ÏÑúÎ≤Ñ + ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Í≥µÏú†)
// ----------------------------------------------
export const TARGET_CITIES = [
  // üá∞üá∑ ÌïúÍµ≠
  { name: 'Seoul', display: 'ÏÑúÏö∏' },
  { name: 'Busan', display: 'Î∂ÄÏÇ∞' },
  { name: 'Jeju', display: 'Ï†úÏ£º' },
  { name: 'Incheon', display: 'Ïù∏Ï≤ú' },
  { name: 'Gangneung', display: 'Í∞ïÎ¶â' },
  { name: 'Sokcho', display: 'ÏÜçÏ¥à' },
  { name: 'Gyeongju', display: 'Í≤ΩÏ£º' },
  { name: 'Yeosu', display: 'Ïó¨Ïàò' },
  { name: 'Jeonju', display: 'Ï†ÑÏ£º' },
  { name: 'Tongyeong', display: 'ÌÜµÏòÅ' },

  // üáØüáµ ÏùºÎ≥∏
  { name: 'Tokyo', display: 'ÎèÑÏøÑ' },
  { name: 'Osaka', display: 'Ïò§ÏÇ¨Ïπ¥' },
  { name: 'Kyoto', display: 'ÍµêÌÜ†' },
  { name: 'Fukuoka', display: 'ÌõÑÏø†Ïò§Ïπ¥' },
  { name: 'Sapporo', display: 'ÏÇøÌè¨Î°ú' },

  // üáπüá≠ ÌÉúÍµ≠
  { name: 'Bangkok', display: 'Î∞©ÏΩï' },
  { name: 'ChiangMai', display: 'ÏπòÏïôÎßàÏù¥' },
  { name: 'Phuket', display: 'Ìë∏Ïºì' },

  // üá∏üá¨ ÎèôÎÇ®ÏïÑ
  { name: 'Singapore', display: 'Ïã±Í∞ÄÌè¨Î•¥' },
  { name: 'Hanoi', display: 'ÌïòÎÖ∏Ïù¥' },
  { name: 'HoChiMinh', display: 'Ìò∏ÏπòÎØº' },
  { name: 'Danang', display: 'Îã§ÎÇ≠' },
  { name: 'KualaLumpur', display: 'Ïø†ÏïåÎùºÎ£∏Ìë∏Î•¥' },

  // üá´üá∑üáÆüáπüá¨üáßüá®üá≠ Ïú†ÎüΩ
  { name: 'Paris', display: 'ÌååÎ¶¨' },
  { name: 'Nice', display: 'ÎãàÏä§' },
  { name: 'Rome', display: 'Î°úÎßà' },
  { name: 'Venice', display: 'Î≤†ÎÑ§ÏπòÏïÑ' },
  { name: 'London', display: 'Îü∞Îçò' },
  { name: 'Zurich', display: 'Ï∑®Î¶¨Ìûà' },
  { name: 'Interlaken', display: 'Ïù∏ÌÑ∞ÎùºÏºÑ' },

  // üá∫üá∏ ÎØ∏Íµ≠
  { name: 'NewYork', display: 'Îâ¥Ïöï' },
  { name: 'LosAngeles', display: 'Î°úÏä§Ïï§Ï†§Î†àÏä§' },
  { name: 'LasVegas', display: 'ÎùºÏä§Î≤†Ïù¥Í±∞Ïä§' },
  { name: 'SanFrancisco', display: 'ÏÉåÌîÑÎûÄÏãúÏä§ÏΩî' },
];


=====================public/js/common.js=======================

import { TARGET_CITIES } from "./cities.js"; // ‚úÖ Í≥µÌÜµ ÎèÑÏãúÎ™©Î°ù import

// ===============================
// üîß ÎèÑÏãú Ï†ïÍ∑úÌôî + Ïä¨Îü¨Í∑∏ Î≥ÄÌôò Ïú†Ìã∏
// ===============================
function normalizeKrCity(kr) {
  if (!kr) return "";
  let s = kr.trim();
  s = s
    .replace(/ÎåÄÌïúÎØºÍµ≠$/, "")
    .replace(/ÌäπÎ≥ÑÏãú$/, "")
    .replace(/Í¥ëÏó≠Ïãú$/, "")
    .replace(/ÏûêÏπòÏãú$/, "")
    .replace(/Ïãú$/, "")
    .replace(/ÎèÑ$/, "")
    .trim();

  const map = {
    "ÏÑúÏö∏ÌäπÎ≥ÑÏãú": "ÏÑúÏö∏",
    "ÏÑúÏö∏Ïãú": "ÏÑúÏö∏",
    "Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú": "Î∂ÄÏÇ∞",
    "Ïù∏Ï≤úÍ¥ëÏó≠Ïãú": "Ïù∏Ï≤ú",
    "ÎåÄÍµ¨Í¥ëÏó≠Ïãú": "ÎåÄÍµ¨",
    "ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú": "ÎåÄÏ†Ñ",
    "Í¥ëÏ£ºÍ¥ëÏó≠Ïãú": "Í¥ëÏ£º",
    "Ïö∏ÏÇ∞Í¥ëÏó≠Ïãú": "Ïö∏ÏÇ∞",
    "Ï†úÏ£ºÏãú": "Ï†úÏ£º",
    "ÏÑúÍ∑ÄÌè¨Ïãú": "Ï†úÏ£º",
  };
  return map[kr] || s;
}

function toSlugFromAny(cityAny) {
  const kr = /[Í∞Ä-Ìû£]/.test(cityAny) ? normalizeKrCity(cityAny) : cityAny;
  const hit = TARGET_CITIES.find(
    (c) => c.display === kr || c.name.toLowerCase() === String(cityAny).toLowerCase()
  );
  return (hit ? hit.name : kr).toLowerCase();
}

// ===============================
const API_BASE_URL =
  location.hostname.includes("localhost") || location.hostname.includes("127.0.0.1")
    ? "http://localhost:8081"
    : "https://xap-h2xh.onrender.com";

// ===============================
export function initSearchBar(onSearch) {
  const cityInput = document.querySelector("#city");
  const checkInInput = document.querySelector("#checkIn");
  const checkOutInput = document.querySelector("#checkOut");
  const searchBtn = document.querySelector("#searchBtn");

  if (!cityInput || !searchBtn) {
    console.warn("Í≤ÄÏÉâÎ∞î ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. initSearchBar Ïã§Ìñâ ÏãúÏ†êÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.");
    return;
  }

  // ‚úÖ ÎÇ†Ïßú Í∏∞Î≥∏Í∞í ÏûêÎèô ÏÑ∏ÌåÖ
  const today = new Date();
  const ci = new Date(today);
  ci.setDate(today.getDate() + 1);
  const co = new Date(today);
  co.setDate(today.getDate() + 2);
  const fmt = (d) => d.toISOString().split("T")[0];

  const params = new URLSearchParams(location.search);
  cityInput.value = params.get("city") || cityInput.value || "";
  if (!checkInInput.value) checkInInput.value = params.get("checkIn") || fmt(ci);
  if (!checkOutInput.value) checkOutInput.value = params.get("checkOut") || fmt(co);

  /* ======================================
     ‚úÖ Í∞ùÏã§ ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ (rooms)
     ====================================== */
  const roomBtn = document.getElementById("roomBtn");
  const dropdown = document.getElementById("roomDropdown");
  const roomSelector = document.querySelector(".room-selector");

  // ‚úÖ ÏÑ∏ÏÖò Ï†ÄÏû•Îêú Í∞ùÏã§ Ï†ïÎ≥¥ Î≥µÏõê (ÏûàÏúºÎ©¥ Í∑∏ÎåÄÎ°ú, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í)
  let rooms = [];
  try {
    const saved = JSON.parse(sessionStorage.getItem("searchRooms") || "[]");
    if (Array.isArray(saved) && saved.length > 0) {
      rooms = saved;
    } else {
      rooms = [{ adults: 2, children: 0, childAges: [] }];
    }
  } catch {
    rooms = [{ adults: 2, children: 0, childAges: [] }];
  }

  // ‚úÖ ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Î≤ÑÌäº ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
  const updateRoomBtnText = () => {
    const totalAdults = rooms.reduce((a, r) => a + r.adults, 0);
    const totalChildren = rooms.reduce((a, r) => a + r.children, 0);
    roomBtn.textContent = `Í∞ùÏã§ ${rooms.length}Í∞ú, ÏÑ±Ïù∏ ${totalAdults}Î™Ö${
      totalChildren ? `, ÏïÑÎèô ${totalChildren}Î™Ö` : ""
    }`;
  };
  if (roomBtn) updateRoomBtnText();

  if (roomBtn && dropdown && roomSelector) {
    let isOpen = false;

    const openDropdown = () => {
      dropdown.style.display = "block";
      isOpen = true;
    };
    const closeDropdown = () => {
      dropdown.style.display = "none";
      isOpen = false;
    };

    // üîí Ï§ëÎ≥µ Î¶¨Ïä§ÎÑà Î∞©ÏßÄ
    if (window.__rsRoomsOutsideHandler) {
      window.removeEventListener("pointerdown", window.__rsRoomsOutsideHandler, true);
    }

    // ‚úÖ Î∞îÍπ• ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
    window.__rsRoomsOutsideHandler = function (e) {
      const inside = e.target.closest(".room-selector");
      if (!inside && isOpen) closeDropdown();
    };
    window.addEventListener("pointerdown", window.__rsRoomsOutsideHandler, true);

    // ‚úÖ Î≤ÑÌäº ÌÜ†Í∏Ä
    roomBtn.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      isOpen ? closeDropdown() : openDropdown();
    });

    // ‚úÖ ÎìúÎ°≠Îã§Ïö¥ ÎÇ¥Î∂Ä ÌÅ¥Î¶≠ Î∞©ÏßÄ
    ["pointerdown", "mousedown", "click", "focusin", "change"].forEach((evt) => {
      dropdown.addEventListener(evt, (e) => e.stopPropagation());
    });

    dropdown.addEventListener("pointerdown", (e) => {
      if (e.target.tagName === "SELECT" || e.target.closest("select")) e.stopPropagation();
    });

    // ‚úÖ Î†åÎçî Ìï®Ïàò
    const renderRooms = () => {
      const roomList = document.getElementById("roomList");
      const wasOpen = isOpen;
      roomList.innerHTML = rooms
        .map(
          (r, i) => `
        <div class="room-item" data-index="${i}">
          <div class="room-header">Í∞ùÏã§ ${i + 1}</div>
          <div class="room-row">
            <span>ÏÑ±Ïù∏</span>
            <div class="counter">
              <button type="button" class="minus adult">‚àí</button>
              <span class="count adult-count">${r.adults}</span>
              <button type="button" class="plus adult">Ôºã</button>
            </div>
          </div>
          <div class="room-row">
            <span>ÏïÑÎèô</span>
            <div class="counter">
              <button type="button" class="minus child">‚àí</button>
              <span class="count child-count">${r.children}</span>
              <button type="button" class="plus child">Ôºã</button>
            </div>
            <div class="child-ages">
              ${r.childAges
                .map(
                  (age, j) =>
                    `<select data-room="${i}" data-child="${j}">
                      ${Array.from({ length: 18 }, (_, n) =>
                        `<option value="${n}" ${n === age ? "selected" : ""}>${n}ÏÑ∏</option>`
                      ).join("")}
                    </select>`
                )
                .join("")}
            </div>
          </div>
        </div>`
        )
        .join("");

      if (wasOpen) openDropdown();

      roomList.querySelectorAll("select").forEach((sel) => {
        ["pointerdown", "mousedown", "click", "focus"].forEach((evt) => {
          sel.addEventListener(evt, (e) => e.stopPropagation());
        });
      });
    };

    renderRooms();

    // ‚úÖ Ï¶ùÍ∞ê Î≤ÑÌäº
    dropdown.addEventListener("click", (e) => {
      const roomEl = e.target.closest(".room-item");
      if (!roomEl) return;
      const idx = parseInt(roomEl.dataset.index, 10);

      if (e.target.classList.contains("plus")) {
        if (e.target.classList.contains("adult")) rooms[idx].adults++;
        else if (e.target.classList.contains("child")) {
          rooms[idx].children++;
          rooms[idx].childAges.push(0);
        }
      } else if (e.target.classList.contains("minus")) {
        if (e.target.classList.contains("adult") && rooms[idx].adults > 1) rooms[idx].adults--;
        else if (e.target.classList.contains("child") && rooms[idx].children > 0) {
          rooms[idx].children--;
          rooms[idx].childAges.pop();
        }
      }
      renderRooms();
    });

    // ‚úÖ ÏïÑÎèô ÎÇòÏù¥ ÏÑ†ÌÉù Î∞òÏòÅ (Îã´Ìûò Î∞©ÏßÄ)
    dropdown.addEventListener("change", (e) => {
      if (e.target.tagName === "SELECT") {
        const r = parseInt(e.target.dataset.room);
        const c = parseInt(e.target.dataset.child);
        rooms[r].childAges[c] = parseInt(e.target.value);
      }
    });

    // ‚úÖ Í∞ùÏã§ Ï∂îÍ∞Ä/ÏÇ≠Ï†ú
    document.getElementById("addRoom")?.addEventListener("click", () => {
      rooms.push({ adults: 2, children: 0, childAges: [] });
      renderRooms();
    });
    document.getElementById("removeRoom")?.addEventListener("click", () => {
      if (rooms.length > 1) rooms.pop();
      renderRooms();
    });

    // ‚úÖ Ï†ÅÏö© Î≤ÑÌäº
    document.getElementById("applyRooms")?.addEventListener("click", () => {
      closeDropdown();
      updateRoomBtnText();
      sessionStorage.setItem("searchRooms", JSON.stringify(rooms));
    });

}


// ‚úÖ Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú
searchBtn.addEventListener("click", async (e) => {
  e.preventDefault();
  const city = cityInput.value.trim();
  const checkIn = checkInInput.value;
  const checkOut = checkOutInput.value;
  if (!city) return alert("ÎèÑÏãúÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");

  // üëá Ïó¨Í∏∞Í∞Ä ÌïµÏã¨
  const currentRooms = JSON.parse(JSON.stringify(rooms));
  sessionStorage.setItem("searchRooms", JSON.stringify(currentRooms));

  const payload = { city, checkIn, checkOut, rooms: currentRooms };
  const q = new URLSearchParams({ city, checkIn, checkOut }).toString();

  if (window.location.pathname.includes("/search.html")) {
    onSearch?.(payload);
  } else {
      const base = window.location.pathname.includes("/city/") ? ".." : ".";
      setTimeout(() => {
        location.href = `${base}/search.html?${q}`;
      }, 100);
  }
});

  /** ===========================
   *  üî† ÏûêÎèôÏôÑÏÑ±
   *  =========================== */
  let autoBox = document.getElementById("autocompletelist");
  if (!autoBox) {
    autoBox = document.createElement("div");
    autoBox.id = "autocompletelist";
    autoBox.className = "autocomplete-box";

    const parent = cityInput.parentElement;
    if (parent) {
      parent.style.position = "relative";
      parent.appendChild(autoBox);
    } else {
      document.body.appendChild(autoBox);
    }
  }

  let timer;
  cityInput.addEventListener("input", () => {
    const kw = cityInput.value.trim();
    if (kw.length < 2) {
      autoBox.style.display = "none";
      return;
    }
    clearTimeout(timer);
    timer = setTimeout(async () => {
      try {
        const res = await fetch(`${API_BASE_URL}/api/cities/search?query=${encodeURIComponent(kw)}`);
        const list = await res.json();
        if (!list?.length) {
          autoBox.style.display = "none";
          return;
        }

        autoBox.innerHTML = list
          .map(
            (c) => `
          <div class="auto-item" data-city="${c.city_kr || c.city_en}">
            ${c.city_kr || c.city_en}
            <span style="color:#888;font-size:13px;">${c.country || ""}</span>
          </div>`
          )
          .join("");

        autoBox.style.position = "absolute";
        autoBox.style.left = "0";
        autoBox.style.top = `${cityInput.offsetHeight + 4}px`;
        autoBox.style.width = "100%";
        autoBox.style.background = "#fff";
        autoBox.style.border = "1px solid #ccc";
        autoBox.style.borderRadius = "4px";
        autoBox.style.boxShadow = "0 2px 4px rgba(0,0,0,0.1)";
        autoBox.style.zIndex = "1000";
        autoBox.style.display = "block";
      } catch (err) {
        console.error("ÎèÑÏãú ÏûêÎèôÏôÑÏÑ± Ïã§Ìå®:", err);
      }
    }, 300);
  });

  autoBox.addEventListener("click", (e) => {
    const item = e.target.closest(".auto-item");
    if (!item) return;
    const picked = item.dataset.city;
    cityInput.value = normalizeKrCity(picked);
    autoBox.style.display = "none";
    cityInput.focus();
  });

  /** ===========================
   *  üèôÔ∏è Ïù∏Í∏∞ Ïó¨ÌñâÏßÄ Î≤ÑÌäº
   *  =========================== */
  const BASE_PATH = window.location.pathname.includes("/city/") ? ".." : ".";
  document.querySelectorAll(".cityQuick").forEach((b) => {
    b.addEventListener("click", () => {
      const raw = b.dataset.city || b.textContent.trim();
      const cityName = normalizeKrCity(raw);
      const ci = new Date();
      ci.setDate(ci.getDate() + 1);
      const co = new Date();
      co.setDate(co.getDate() + 2);
      const fmt = (d) => d.toISOString().split("T")[0];
      location.href = `${BASE_PATH}/search.html?city=${encodeURIComponent(
        cityName
      )}&checkIn=${fmt(ci)}&checkOut=${fmt(co)}`;
    });
  });
}

/** ===========================
 *  üì¶ Ìò∏ÌÖî Î™©Î°ù Î†åÎçîÎßÅ
 *  =========================== */
export async function fetchAndRenderHotels(city, checkIn, checkOut, roomsParam) {
  const target = document.getElementById("hotelList") || document.getElementById("hotel-list");
  if (!target) return false;

  const match = TARGET_CITIES.find(
    (c) => c.display === city || c.name.toLowerCase() === city.toLowerCase()
  );
  const slug = match ? match.name : city;
  const BASE_PATH = window.location.pathname.includes("/city/") ? ".." : ".";
  
  let hotels = [];
  let useMock = true;

  try {
    // ‚úÖ roomsParam Ïö∞ÏÑ† ÏÇ¨Ïö©
    const storedRooms =
      roomsParam || JSON.parse(sessionStorage.getItem("searchRooms") || '[{"adults":2,"children":0,"childAges":[]}]');

    const payload = { city: slug, checkIn, checkOut, rooms: storedRooms };
    const apiRes = await fetch(`${API_BASE_URL}/api/hotels/search`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (apiRes.ok) {
      const apiData = await apiRes.json();
      if (apiData?.length) {
        hotels = apiData;
        useMock = false;
      }
    } else {
      console.warn("API ÏùëÎãµ Ïã§Ìå®:", apiRes.status);
    }
  } catch (e) {
    console.warn("API Ìò∏Ï∂ú Ïã§Ìå®, mock Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥:", e);
  }

  if (useMock) {
    try {
      const res = await fetch(`${BASE_PATH}/city-data/${slug.toLowerCase()}-top5.json`);
      const data = await res.json();
      hotels = data.topRated || [];
    } catch (e) {
      console.error("mock Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", e);
    }
  }

  if (!hotels.length) {
    target.innerHTML = "<p style='text-align:center;color:#777;'>ÌëúÏãúÌï† ÏàôÏÜåÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>";
    return false;
  }

  target.innerHTML = hotels
    .map(
      (h) => `
    <div class="hotel-card">
      <img loading="lazy" src="${h.image || "https://picsum.photos/seed/" + h.name + "/400/250"}" alt="${h.name}">
      <div class="hotel-info">
        <h3>${h.name}</h3>
        <p>üìç ${h.address || h.city}</p>
        <p>‚≠ê ${h.rating || "4.5"} / 5.0</p>
        <p class="price">üí∞ ${h.lowestPrice ? h.lowestPrice + "Ïõê~" : "ÏöîÍ∏à ÌôïÏù∏ Î∂àÍ∞Ä"}</p>
      </div>
    </div>
  `
    )
    .join("");

  return true;
}

/** ===========================
 *  üß© Partial Loader
 *  =========================== */
export async function loadPartial(targetId, path, callback) {
  try {
    const res = await fetch(path);
    if (!res.ok) throw new Error(`Failed to load ${path}`);
    const html = await res.text();
    const el = document.getElementById(targetId);
    if (el) el.innerHTML = html;
    if (callback) callback();
  } catch (err) {
    console.error("‚ùå partial load failed:", path, err);
  }
}

/** ===========================
 *  üìç city-map.json ÏûêÎèô Î°úÎìú
 *  =========================== */
const cityMapPath = window.location.pathname.includes("/city/")
  ? "../city-data/city-map.json"
  : "./city-data/city-map.json";

fetch(cityMapPath)
  .then((res) => res.json())
  .then((list) => {
    window.citySlugMap = Object.fromEntries(
      list.map((c) => [c.display, c.name.toLowerCase()])
    );
  })
  .catch((err) => console.warn("city-map.json Î°úÎìú Ïã§Ìå®:", err));


=====================public/js/home.js=======================

/**
 * RapidStay - Ìôà Ï†ÑÏö© JS (Í≤ÄÏÉâ + Ï£ºÏöî ÎèÑÏãú ÎØ∏Î¶¨Î≥¥Í∏∞)
 * ---------------------------------------------------
 * /public/index.html Ï†ÑÏö©
 */

import { initSearchBar } from "./common.js";

const API_BASE_URL =
  location.hostname.includes("localhost") || location.hostname.includes("127.0.0.1")
    ? "http://localhost:8081"
    : "https://xap-h2xh.onrender.com";

document.addEventListener("DOMContentLoaded", async () => {
  // ‚úÖ 1. Ï£ºÏöî ÎèÑÏãú ÎØ∏Î¶¨Î≥¥Í∏∞ Î®ºÏ†Ä Î°úÎìú
  await loadCityPreview();

  // ‚úÖ 2. Í≤ÄÏÉâÎ∞î Ï¥àÍ∏∞Ìôî
  setTimeout(() => {
    try {
      initSearchBar();
    } catch (err) {
      console.error("Í≤ÄÏÉâÎ∞î Ï¥àÍ∏∞Ìôî Ïã§Ìå®:", err);
    }
  }, 100);
});

/** ===============================
 *  üåç Ï£ºÏöî ÎèÑÏãú ÎØ∏Î¶¨Î≥¥Í∏∞
 *  =============================== */
async function loadCityPreview() {
  const cityContainer = document.getElementById("cityContainer");
  if (!cityContainer) return;

  const cityList = [
    { name: "Seoul", display: "ÏÑúÏö∏" },
    { name: "Busan", display: "Î∂ÄÏÇ∞" },
    { name: "Jeju", display: "Ï†úÏ£º" },
    { name: "Tokyo", display: "ÎèÑÏøÑ" },
    { name: "Bangkok", display: "Î∞©ÏΩï" },
    { name: "Paris", display: "ÌååÎ¶¨" },
  ];

  for (const c of cityList) {
    try {
      const res = await fetch(`./city-data/${c.name.toLowerCase()}-top5.json`, { cache: "no-store" });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();

      const hotels = (data.topRated || []).slice(0, 5);
      const cards = hotels
        .map(
          (h) => `
          <div class="hotel-card">
            <img src="${h.image || "https://picsum.photos/seed/" + h.name + "/400/250"}" alt="${h.name}">
            <div class="hotel-info">
              <strong>${h.name}</strong>
              <p>üìç ${h.address || h.city}</p>
              <p>‚≠ê ${h.rating || "4.5"} / 5.0</p>
            </div>
          </div>`
        )
        .join("");

      cityContainer.insertAdjacentHTML(
        "beforeend",
        `
        <section class="city-section">
          <h3>${c.display} Ïù∏Í∏∞ ÏàôÏÜå</h3>
          <div class="scroll-wrapper">
            <button class="scroll-btn left">‚Äπ</button>
            <div class="horizontal-scroll">${cards}</div>
            <button class="scroll-btn right">‚Ä∫</button>
          </div>
          <div class="city-more">
            <a href="./city/${c.name.toLowerCase()}.html">${c.display} Ï£ºÏöî ÏàôÏÜå Î≥¥Í∏∞ ‚ñ∂</a>
          </div>
        </section>
      `
      );
    } catch (err) {
      console.warn(`${c.display} ÎØ∏Î¶¨Î≥¥Í∏∞ Î°úÎìú Ïã§Ìå®:`, err);
    }
  }

  // ‚úÖ Ïä§ÌÅ¨Î°§ Î≤ÑÌäº Ïù¥Î≤§Ìä∏
  document.querySelectorAll(".scroll-wrapper").forEach((wrap) => {
    const scrollArea = wrap.querySelector(".horizontal-scroll");
    wrap.querySelector(".scroll-btn.left")?.addEventListener("click", () => {
      scrollArea.scrollBy({ left: -300, behavior: "smooth" });
    });
    wrap.querySelector(".scroll-btn.right")?.addEventListener("click", () => {
      scrollArea.scrollBy({ left: 300, behavior: "smooth" });
    });
  });
}


=====================public/js/search.js=======================

console.log("‚úÖ search.js loaded");

import { initSearchBar } from "./common.js";

const API_BASE_URL =
  location.hostname.includes("localhost") || location.hostname.includes("127.0.0.1")
    ? "http://localhost:8081"
    : "https://xap-h2xh.onrender.com";

const params = new URLSearchParams(window.location.search);
const city = params.get("city") || "Seoul";
const checkIn = params.get("checkIn") || "2025-11-01";
const checkOut = params.get("checkOut") || "2025-11-03";
document.title = `${city} Ìò∏ÌÖî Í≤ÄÏÉâ | RapidStay ‚Äì Ïã§ÏãúÍ∞Ñ ÏàôÏÜå ÎπÑÍµê`;

/* ===============================
   üîç Ï¥àÍ∏∞ Î°úÎìú
=============================== */
window.addEventListener("DOMContentLoaded", async () => {
  const mapWrapper = document.getElementById("mapWrapper");
  mapWrapper.style.display = "none";

  // ‚úÖ header-search.html ÎÇ¥ Í≤ÄÏÉâÏ∞ΩÍ≥º Ïó∞Í≤∞
  initSearchBar(async (payload) => {
    await handleSearch(payload.city, payload.checkIn, payload.checkOut, payload.rooms);
  });

  const hasResult = await handleSearch(city, checkIn, checkOut);
  mapWrapper.style.display = hasResult ? "block" : "none";
});

/* ===============================
   üè® Í≤ÄÏÉâ Ìï®Ïàò
=============================== */
export async function handleSearch(city, checkIn, checkOut, rooms) {
  const target = document.getElementById("hotel-list");
  target.innerHTML = "<p style='text-align:center;color:#666;'>Í≤ÄÏÉâ Ï§ë...</p>";

  // ‚úÖ Í∞ùÏã§ Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞ (ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í)
  const storedRooms =
    rooms ||
    JSON.parse(sessionStorage.getItem("searchRooms") || '[{"adults":2,"children":0,"childAges":[]}]');

  const payload = {
    city,
    checkIn,
    checkOut,
    rooms: storedRooms,
  };

  try {
    const res = await fetch(`${API_BASE_URL}/api/hotels/search`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const data = await res.json();
    const hasResult = renderHotels(data);
    return hasResult;
  } catch (err) {
    console.error("‚ùå Í≤ÄÏÉâ Ïã§Ìå®:", err);
    target.innerHTML = "<p class='empty'>Ìò∏ÌÖî Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.</p>";
    return false;
  }
}

/* ===============================
   üñºÔ∏è Î†åÎçîÎßÅ
=============================== */
function renderHotels(hotels) {
  const validHotels = hotels.filter((h) => h.id != null);
  const list = document.getElementById("hotel-list");
  const mapSection = document.getElementById("mapSection");

  if (validHotels.length === 0) {
    list.innerHTML = `<p class="empty">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>`;
    mapSection.style.display = "none"; // ÏßÄÎèÑ Î≤ÑÌäº Ïà®ÍπÄ
    return false;
  }

  mapSection.style.display = "block"; // ‚úÖ Í≤∞Í≥º ÏûàÏùÑ ÎïåÎßå ÏßÄÎèÑ Î≤ÑÌäº ÌëúÏãú
  list.innerHTML = validHotels
    .map(
      (h) => `
      <div class="hotel-card" data-id="${h.id}" data-expedia="${h.expediaUrl || ""}">
        <img src="https://picsum.photos/seed/${h.name}/400/250" alt="${h.name}">
        <div class="hotel-info">
          <h3>${h.name}</h3>
          <p>üìç ${h.address || h.city}</p>
          <p>‚≠ê ${h.rating?.toFixed(1) || "4.5"} / 5.0</p>
          <p class="price">üí∞ ${h.lowestPrice ? `${h.lowestPrice}Ïõê~` : "ÏöîÍ∏à ÌôïÏù∏ Î∂àÍ∞Ä"}</p>
        </div>
      </div>`
    )
    .join("");

  // Ïπ¥Îìú ÌÅ¥Î¶≠ Ïù¥Îèô Ïù¥Î≤§Ìä∏
  document.querySelectorAll(".hotel-card").forEach((card) => {
    card.addEventListener("click", () => {
      const expediaUrl = card.dataset.expedia || "https://www.expedia.com/";
      sessionStorage.setItem("expediaRedirectUrl", expediaUrl);
      window.location.href = "loading.html";
    });
  });

  window.currentHotels = validHotels;
  return true;
}

/* ===============================
   üó∫Ô∏è ÏßÄÎèÑ Î™®Îã¨
=============================== */
const openMapBtn = document.getElementById("openMapBtn");
const mapModal = document.getElementById("mapModal");

if (openMapBtn) {
  openMapBtn.addEventListener("click", () => {
    if (!window.currentHotels || window.currentHotels.length === 0) {
      alert("ÌëúÏãúÌï† ÏàôÏÜåÍ∞Ä ÏóÜÏäµÎãàÎã§.");
      return;
    }
    mapModal.style.display = "flex";
    initMap();
  });
}

window.closeMap = function () {
  mapModal.style.display = "none";
};

/* ===============================
   üß≠ ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî
=============================== */
function initMap() {
  const mapEl = document.getElementById("googleMap");
  if (!mapEl) return;

  const map = new google.maps.Map(mapEl, {
    zoom: 12,
    center: { lat: 37.5665, lng: 126.978 },
  });

  (window.currentHotels || []).forEach((hotel) => {
    if (hotel.latitude && hotel.longitude) {
      new google.maps.Marker({
        position: { lat: hotel.latitude, lng: hotel.longitude },
        map,
        title: hotel.name,
      });
    }
  });
}


==================public/script/generatecitypages.js======================
/**
 * RapidStay - ÎèÑÏãúÎ≥Ñ Ï∂îÏ≤ú ÌéòÏù¥ÏßÄ + SEO Î©îÌÉÄ + Íµ¨Ï°∞Ìôî Îç∞Ïù¥ÌÑ∞ + Sitemap ÏûêÎèô ÏÉùÏÑ± (v4.2)
 * ---------------------------------------------------
 * Ïã§Ìñâ: npm run generate
 */

import fs from "fs";
import path from "path";
import { fileURLToPath, pathToFileURL } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// === ÏÑ§Ï†ï Í≤ΩÎ°ú ==========================
const TEMPLATE_PATH = "./public/city-template.html";
const HEADER_PATH = "./public/partials/header-search.html";
const OUTPUT_JSON_DIR = "./public/city-data";
const OUTPUT_HTML_DIR = "./public/city";
const PUBLIC_DIR = path.join(__dirname, "../public");
const BASE_URL = "https://rapidstay-c7f8e.web.app"; // ‚úÖ Ïã§Ï†ú Î∞∞Ìè¨ Í≤ΩÎ°ú

// === cities.js Î∂àÎü¨Ïò§Í∏∞ ==========================
const citiesPath = path.join(__dirname, "../public/js/cities.js");
const citiesModule = await import(pathToFileURL(citiesPath).href);
const { TARGET_CITIES } = citiesModule;

// === Ïú†Ìã∏ ==========================
function ensureDir(dir) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

// === ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ==========================
function createDummyHotels(city) {
  return Array.from({ length: 10 }).map((_, i) => ({
    name: `${city} Hotel ${i + 1}`,
    city,
    address: `${city} Ï§ëÏã¨Í∞Ä ${i + 10}Î≤àÏßÄ`,
    rating: (4 + Math.random() * 1).toFixed(1),
    lowestPrice: (70000 + Math.random() * 100000).toFixed(0),
    image: `https://picsum.photos/seed/${city}-${i}/400/250`,
    amenities: i % 2 === 0 ? "Family, WiFi" : "Pet Friendly, Pool",
  }));
}

// === JSON ÏÉùÏÑ± ==========================
async function generateJson(city, hotels) {
  const topRated = hotels.slice(0, 5);
  const petFriendly = hotels.filter((h) => h.amenities.includes("Pet")).slice(0, 5);
  const family = hotels.filter((h) => h.amenities.includes("Family")).slice(0, 5);
  const data = { topRated, petFriendly, family };

  const jsonPath = path.join(OUTPUT_JSON_DIR, `${city.toLowerCase()}-top5.json`);
  fs.writeFileSync(jsonPath, JSON.stringify(data, null, 2));
  console.log(`üíæ ${jsonPath} Ï†ÄÏû• ÏôÑÎ£å`);
}

// === JSON-LD ÏÉùÏÑ± ==========================
function makeJsonLd(hotels, display) {
  const items = hotels.slice(0, 5).map((h, idx) => ({
    "@type": "Hotel",
    name: h.name,
    address: h.address,
    image: h.image,
    aggregateRating: {
      "@type": "AggregateRating",
      ratingValue: h.rating,
      reviewCount: Math.floor(50 + Math.random() * 200),
    },
    priceRange: `‚Ç©${Number(h.lowestPrice).toLocaleString()}~`,
    position: idx + 1,
  }));

  return JSON.stringify(
    {
      "@context": "https://schema.org",
      "@type": "ItemList",
      name: `${display} Ïù∏Í∏∞ Ìò∏ÌÖî`,
      itemListElement: items,
    },
    null,
    2
  );
}

// === HTML ÏÉùÏÑ± ==========================
function generateHtml(city, display) {
  let template = fs.readFileSync(TEMPLATE_PATH, "utf8");

  // ‚úÖ Ìó§Îçî Ï§ëÏ≤© Î∞©ÏßÄ Ï≤òÎ¶¨ (ÎÇ¥Î∂Ä <header> ÏûêÎèô Ï†úÍ±∞ + BOM Ï†úÍ±∞)
  let headerHTML = "<div class='fallback-header'>üè® RapidStay Hotel Search</div>";
  if (fs.existsSync(HEADER_PATH)) {
    let rawHeader = fs.readFileSync(HEADER_PATH, "utf8");
    rawHeader = rawHeader.replace(/^\uFEFF/, ""); // BOM Ï†úÍ±∞
    rawHeader = rawHeader.replace(/<\/?header[^>]*>/gi, "").trim(); // header Ï†úÍ±∞
    headerHTML = rawHeader;
  }

  const canonicalUrl = `${BASE_URL}/city/${city.toLowerCase()}.html`;
  const title = `${display} Ìò∏ÌÖî Ï∂îÏ≤ú | RapidStay`;
  const description = `${display} Ïù∏Í∏∞ Ìò∏ÌÖî, Í∞ÄÏ°± Ïó¨Ìñâ, Î∞òÎ†§ÎèôÎ¨º ÎèôÎ∞ò ÏàôÏÜå Î™®Ïùå`;
  const imageUrl = `${BASE_URL}/assets/og/${city.toLowerCase()}.jpg`;

  const hotels = createDummyHotels(display);
  const jsonLd = makeJsonLd(hotels, display);

  template = template
    .replace(/{{cityName}}/g, display)
    .replace(/{{title}}/g, title)
    .replace(/{{description}}/g, description)
    .replace(/{{imageUrl}}/g, imageUrl)
    .replace(/{{canonicalUrl}}/g, canonicalUrl)
    .replace(/{{date}}/g, new Date().toISOString().split("T")[0])
    .replace("{{HEADER_SEARCH}}", `${headerHTML}`)
    .replace("{{HOTEL_JSON}}", jsonLd);

  const htmlPath = path.join(OUTPUT_HTML_DIR, `${city.toLowerCase()}.html`);
  fs.writeFileSync(htmlPath, template);
  console.log(`üìù ${htmlPath} ÏÉùÏÑ± ÏôÑÎ£å`);
}

// === sitemap.xml ÏûêÎèô ÏÉùÏÑ± ==========================
function generateSitemap() {
  const htmlFiles = new Set();

  function walk(dir) {
    const files = fs.readdirSync(dir);
    for (const file of files) {
      const fullPath = path.join(dir, file);
      const stat = fs.statSync(fullPath);
      if (stat.isDirectory()) {
        walk(fullPath);
      } else if (file.endsWith(".html")) {
        const relPath = fullPath
          .replace(PUBLIC_DIR, "")
          .replace(/\\/g, "/")
          .replace(/^\/+/, "");
        htmlFiles.add(`${BASE_URL}/${relPath}`);
      }
    }
  }

  walk(PUBLIC_DIR);

  const sortedUrls = [...htmlFiles].sort();
  const now = new Date().toISOString();
  const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="https://www.sitemaps.org/schemas/sitemap/0.9">
${sortedUrls
  .map(
    (url) => `
  <url>
    <loc>${url}</loc>
    <lastmod>${now}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>${url.includes("/city/") ? "0.8" : "1.0"}</priority>
  </url>`
  )
  .join("")}
</urlset>`;

  const sitemapPath = path.join(PUBLIC_DIR, "sitemap.xml");
  fs.writeFileSync(sitemapPath, sitemap);
  console.log(`üåê sitemap.xml Í∞±Ïã† ÏôÑÎ£å (${sortedUrls.length}Í∞ú URL Ìè¨Ìï®)`);
}

// === Ïã§Ìñâ ==========================
(async () => {
  ensureDir(OUTPUT_JSON_DIR);
  ensureDir(OUTPUT_HTML_DIR);

  for (const c of TARGET_CITIES) {
    const hotels = createDummyHotels(c.name);
    await generateJson(c.name, hotels);
    generateHtml(c.name, c.display);
  }

  generateSitemap();
  console.log("‚úÖ Î™®Îì† ÎèÑÏãú ÌéòÏù¥ÏßÄ ÏÉùÏÑ± Î∞è sitemap.xml ÏûêÎèô Í∞±Ïã† ÏôÑÎ£å!");
  console.log(`üìÅ Ï∂úÎ†• Í≤ΩÎ°ú: ${path.resolve(OUTPUT_HTML_DIR)}`);
})();



===================public/seo-batch/deploytofirebase.js===================
// deployToFirebase.js
import { execSync } from "child_process";
import fs from "fs";
import path from "path";

const __dirname = path.resolve();
// ÎÇ†Ïßú Ìè¥Îçî Ï†úÍ±∞ (ÌòÑÏû¨ Íµ¨Ï°∞Ïóê ÎßûÏ∂§)
const src = path.join(__dirname, "seo-batch", "output");
const dest = path.join(__dirname, "public", "seo");

// 1. Í∏∞Ï°¥ seo Ìè¥Îçî ÎπÑÏö∞Í∏∞
fs.rmSync(dest, { recursive: true, force: true });
fs.mkdirSync(dest, { recursive: true });

// 2. output Ìè¥Îçî ÎÇ¥ ÌååÏùº Î≥µÏÇ¨
if (!fs.existsSync(src)) {
  console.error(`‚ùå Source folder not found: ${src}`);
  process.exit(1);
}

const files = fs.readdirSync(src);
if (files.length === 0) {
  console.error(`‚ö†Ô∏è No files found in ${src}`);
  process.exit(1);
}

for (const file of files) {
  const srcPath = path.join(src, file);
  const destPath = path.join(dest, file);
  if (fs.lstatSync(srcPath).isDirectory()) {
    execSync(`cp -r "${srcPath}" "${destPath}"`);
  } else {
    fs.copyFileSync(srcPath, destPath);
  }
}

console.log("‚úÖ SEO Ìè¥Îçî Í∞±Ïã† ÏôÑÎ£å");

// 3. Firebase Î∞∞Ìè¨
try {
  execSync("firebase deploy --only hosting", { stdio: "inherit" });
  console.log("üöÄ Firebase Î∞∞Ìè¨ ÏôÑÎ£å");
} catch (err) {
  console.error("Î∞∞Ìè¨ Ï§ë Ïò§Î•ò Î∞úÏÉù:", err.message);
}
