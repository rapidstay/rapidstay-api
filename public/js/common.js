import { TARGET_CITIES } from "./cities.js"; // ‚úÖ Í≥µÌÜµ ÎèÑÏãúÎ™©Î°ù import

// ===============================
// üîß ÎèÑÏãú Ï†ïÍ∑úÌôî + Ïä¨Îü¨Í∑∏ Î≥ÄÌôò Ïú†Ìã∏
// ===============================
function normalizeKrCity(kr) {
  if (!kr) return "";
  let s = kr.trim();
  s = s
    .replace(/ÎåÄÌïúÎØºÍµ≠$/, "")
    .replace(/ÌäπÎ≥ÑÏãú$/, "")
    .replace(/Í¥ëÏó≠Ïãú$/, "")
    .replace(/ÏûêÏπòÏãú$/, "")
    .replace(/Ïãú$/, "")
    .replace(/ÎèÑ$/, "")
    .trim();

  const map = {
    "ÏÑúÏö∏ÌäπÎ≥ÑÏãú": "ÏÑúÏö∏",
    "ÏÑúÏö∏Ïãú": "ÏÑúÏö∏",
    "Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú": "Î∂ÄÏÇ∞",
    "Ïù∏Ï≤úÍ¥ëÏó≠Ïãú": "Ïù∏Ï≤ú",
    "ÎåÄÍµ¨Í¥ëÏó≠Ïãú": "ÎåÄÍµ¨",
    "ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú": "ÎåÄÏ†Ñ",
    "Í¥ëÏ£ºÍ¥ëÏó≠Ïãú": "Í¥ëÏ£º",
    "Ïö∏ÏÇ∞Í¥ëÏó≠Ïãú": "Ïö∏ÏÇ∞",
    "Ï†úÏ£ºÏãú": "Ï†úÏ£º",
    "ÏÑúÍ∑ÄÌè¨Ïãú": "Ï†úÏ£º",
  };
  return map[kr] || s;
}

function toSlugFromAny(cityAny) {
  const kr = /[Í∞Ä-Ìû£]/.test(cityAny) ? normalizeKrCity(cityAny) : cityAny;
  const hit = TARGET_CITIES.find(
    (c) => c.display === kr || c.name.toLowerCase() === String(cityAny).toLowerCase()
  );
  return (hit ? hit.name : kr).toLowerCase();
}

// ===============================
const API_BASE_URL =
  location.hostname.includes("localhost") || location.hostname.includes("127.0.0.1")
    ? "http://localhost:8081"
    : "https://xap-h2xh.onrender.com";

// ===============================
export function initSearchBar(onSearch) {
  const cityInput = document.querySelector("#city");
  const checkInInput = document.querySelector("#checkIn");
  const checkOutInput = document.querySelector("#checkOut");
  const searchBtn = document.querySelector("#searchBtn");

  if (!cityInput || !searchBtn) {
    console.warn("Í≤ÄÏÉâÎ∞î ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. initSearchBar Ïã§Ìñâ ÏãúÏ†êÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.");
    return;
  }

  // ‚úÖ ÎÇ†Ïßú Í∏∞Î≥∏Í∞í ÏûêÎèô ÏÑ∏ÌåÖ
  const today = new Date();
  const ci = new Date(today);
  ci.setDate(today.getDate() + 1);
  const co = new Date(today);
  co.setDate(today.getDate() + 2);
  const fmt = (d) => d.toISOString().split("T")[0];

  const params = new URLSearchParams(location.search);
  cityInput.value = params.get("city") || cityInput.value || "";
  if (!checkInInput.value) checkInInput.value = params.get("checkIn") || fmt(ci);
  if (!checkOutInput.value) checkOutInput.value = params.get("checkOut") || fmt(co);

  /* ======================================
     ‚úÖ Í∞ùÏã§ ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ (rooms)
     ====================================== */
  const roomBtn = document.getElementById("roomBtn");
  const dropdown = document.getElementById("roomDropdown");
  const roomSelector = document.querySelector(".room-selector");

  // ‚úÖ ÏÑ∏ÏÖò Ï†ÄÏû•Îêú Í∞ùÏã§ Ï†ïÎ≥¥ Î≥µÏõê (ÏûàÏúºÎ©¥ Í∑∏ÎåÄÎ°ú, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í)
  let rooms = [];
  try {
    const saved = JSON.parse(sessionStorage.getItem("searchRooms") || "[]");
    if (Array.isArray(saved) && saved.length > 0) {
      rooms = saved;
    } else {
      rooms = [{ adults: 2, children: 0, childAges: [] }];
    }
  } catch {
    rooms = [{ adults: 2, children: 0, childAges: [] }];
  }

  // ‚úÖ ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Î≤ÑÌäº ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
  const updateRoomBtnText = () => {
    const totalAdults = rooms.reduce((a, r) => a + r.adults, 0);
    const totalChildren = rooms.reduce((a, r) => a + r.children, 0);
    roomBtn.textContent = `Í∞ùÏã§ ${rooms.length}Í∞ú, ÏÑ±Ïù∏ ${totalAdults}Î™Ö${
      totalChildren ? `, ÏïÑÎèô ${totalChildren}Î™Ö` : ""
    }`;
  };
  if (roomBtn) updateRoomBtnText();

  if (roomBtn && dropdown && roomSelector) {
    let isOpen = false;

    const openDropdown = () => {
      dropdown.style.display = "block";
      isOpen = true;
    };
    const closeDropdown = () => {
      dropdown.style.display = "none";
      isOpen = false;
    };

    // üîí Ï§ëÎ≥µ Î¶¨Ïä§ÎÑà Î∞©ÏßÄ
    if (window.__rsRoomsOutsideHandler) {
      window.removeEventListener("pointerdown", window.__rsRoomsOutsideHandler, true);
    }

    // ‚úÖ Î∞îÍπ• ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
    window.__rsRoomsOutsideHandler = function (e) {
      const inside = e.target.closest(".room-selector");
      if (!inside && isOpen) closeDropdown();
    };
    window.addEventListener("pointerdown", window.__rsRoomsOutsideHandler, true);

    // ‚úÖ Î≤ÑÌäº ÌÜ†Í∏Ä
    roomBtn.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      isOpen ? closeDropdown() : openDropdown();
    });

    // ‚úÖ ÎìúÎ°≠Îã§Ïö¥ ÎÇ¥Î∂Ä ÌÅ¥Î¶≠ Î∞©ÏßÄ
    ["pointerdown", "mousedown", "click", "focusin", "change"].forEach((evt) => {
      dropdown.addEventListener(evt, (e) => e.stopPropagation());
    });

    dropdown.addEventListener("pointerdown", (e) => {
      if (e.target.tagName === "SELECT" || e.target.closest("select")) e.stopPropagation();
    });

    // ‚úÖ Î†åÎçî Ìï®Ïàò
    const renderRooms = () => {
      const roomList = document.getElementById("roomList");
      const wasOpen = isOpen;
      roomList.innerHTML = rooms
        .map(
          (r, i) => `
        <div class="room-item" data-index="${i}">
          <div class="room-header">Í∞ùÏã§ ${i + 1}</div>
          <div class="room-row">
            <span>ÏÑ±Ïù∏</span>
            <div class="counter">
              <button type="button" class="minus adult">‚àí</button>
              <span class="count adult-count">${r.adults}</span>
              <button type="button" class="plus adult">Ôºã</button>
            </div>
          </div>
          <div class="room-row">
            <span>ÏïÑÎèô</span>
            <div class="counter">
              <button type="button" class="minus child">‚àí</button>
              <span class="count child-count">${r.children}</span>
              <button type="button" class="plus child">Ôºã</button>
            </div>
            <div class="child-ages">
              ${r.childAges
                .map(
                  (age, j) =>
                    `<select data-room="${i}" data-child="${j}">
                      ${Array.from({ length: 18 }, (_, n) =>
                        `<option value="${n}" ${n === age ? "selected" : ""}>${n}ÏÑ∏</option>`
                      ).join("")}
                    </select>`
                )
                .join("")}
            </div>
          </div>
        </div>`
        )
        .join("");

      if (wasOpen) openDropdown();

      roomList.querySelectorAll("select").forEach((sel) => {
        ["pointerdown", "mousedown", "click", "focus"].forEach((evt) => {
          sel.addEventListener(evt, (e) => e.stopPropagation());
        });
      });
    };

    renderRooms();

    // ‚úÖ Ï¶ùÍ∞ê Î≤ÑÌäº
    dropdown.addEventListener("click", (e) => {
      const roomEl = e.target.closest(".room-item");
      if (!roomEl) return;
      const idx = parseInt(roomEl.dataset.index, 10);

      if (e.target.classList.contains("plus")) {
        if (e.target.classList.contains("adult")) rooms[idx].adults++;
        else if (e.target.classList.contains("child")) {
          rooms[idx].children++;
          rooms[idx].childAges.push(0);
        }
      } else if (e.target.classList.contains("minus")) {
        if (e.target.classList.contains("adult") && rooms[idx].adults > 1) rooms[idx].adults--;
        else if (e.target.classList.contains("child") && rooms[idx].children > 0) {
          rooms[idx].children--;
          rooms[idx].childAges.pop();
        }
      }
      renderRooms();
    });

    // ‚úÖ ÏïÑÎèô ÎÇòÏù¥ ÏÑ†ÌÉù Î∞òÏòÅ (Îã´Ìûò Î∞©ÏßÄ)
    dropdown.addEventListener("change", (e) => {
      if (e.target.tagName === "SELECT") {
        const r = parseInt(e.target.dataset.room);
        const c = parseInt(e.target.dataset.child);
        rooms[r].childAges[c] = parseInt(e.target.value);
      }
    });

    // ‚úÖ Í∞ùÏã§ Ï∂îÍ∞Ä/ÏÇ≠Ï†ú
    document.getElementById("addRoom")?.addEventListener("click", () => {
      rooms.push({ adults: 2, children: 0, childAges: [] });
      renderRooms();
    });
    document.getElementById("removeRoom")?.addEventListener("click", () => {
      if (rooms.length > 1) rooms.pop();
      renderRooms();
    });

    // ‚úÖ Ï†ÅÏö© Î≤ÑÌäº
    document.getElementById("applyRooms")?.addEventListener("click", () => {
      closeDropdown();
      updateRoomBtnText();
      sessionStorage.setItem("searchRooms", JSON.stringify(rooms));
    });

}


// ‚úÖ Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú
searchBtn.addEventListener("click", async (e) => {
  e.preventDefault();
  const city = cityInput.value.trim();
  const checkIn = checkInInput.value;
  const checkOut = checkOutInput.value;
  if (!city) return alert("ÎèÑÏãúÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");

  // üëá Ïó¨Í∏∞Í∞Ä ÌïµÏã¨
  const currentRooms = JSON.parse(JSON.stringify(rooms));
  sessionStorage.setItem("searchRooms", JSON.stringify(currentRooms));

  const payload = { city, checkIn, checkOut, rooms: currentRooms };
  const q = new URLSearchParams({ city, checkIn, checkOut }).toString();

  if (window.location.pathname.includes("/search.html")) {
    onSearch?.(payload);
  } else {
      const base = window.location.pathname.includes("/city/") ? ".." : ".";
      setTimeout(() => {
        location.href = `${base}/search.html?${q}`;
      }, 100);
  }
});

  /** ===========================
   *  üî† ÏûêÎèôÏôÑÏÑ±
   *  =========================== */
  let autoBox = document.getElementById("autocompletelist");
  if (!autoBox) {
    autoBox = document.createElement("div");
    autoBox.id = "autocompletelist";
    autoBox.className = "autocomplete-box";

    const parent = cityInput.parentElement;
    if (parent) {
      parent.style.position = "relative";
      parent.appendChild(autoBox);
    } else {
      document.body.appendChild(autoBox);
    }
  }

  let timer;
  cityInput.addEventListener("input", () => {
    const kw = cityInput.value.trim();
    if (kw.length < 2) {
      autoBox.style.display = "none";
      return;
    }
    clearTimeout(timer);
    timer = setTimeout(async () => {
      try {
        const res = await fetch(`${API_BASE_URL}/api/cities/search?query=${encodeURIComponent(kw)}`);
        const list = await res.json();
        if (!list?.length) {
          autoBox.style.display = "none";
          return;
        }

        autoBox.innerHTML = list
          .map(
            (c) => `
          <div class="auto-item" data-city="${c.city_kr || c.city_en}">
            ${c.city_kr || c.city_en}
            <span style="color:#888;font-size:13px;">${c.country || ""}</span>
          </div>`
          )
          .join("");

        autoBox.style.position = "absolute";
        autoBox.style.left = "0";
        autoBox.style.top = `${cityInput.offsetHeight + 4}px`;
        autoBox.style.width = "100%";
        autoBox.style.background = "#fff";
        autoBox.style.border = "1px solid #ccc";
        autoBox.style.borderRadius = "4px";
        autoBox.style.boxShadow = "0 2px 4px rgba(0,0,0,0.1)";
        autoBox.style.zIndex = "1000";
        autoBox.style.display = "block";
      } catch (err) {
        console.error("ÎèÑÏãú ÏûêÎèôÏôÑÏÑ± Ïã§Ìå®:", err);
      }
    }, 300);
  });

  autoBox.addEventListener("click", (e) => {
    const item = e.target.closest(".auto-item");
    if (!item) return;
    const picked = item.dataset.city;
    cityInput.value = normalizeKrCity(picked);
    autoBox.style.display = "none";
    cityInput.focus();
  });

  /** ===========================
   *  üèôÔ∏è Ïù∏Í∏∞ Ïó¨ÌñâÏßÄ Î≤ÑÌäº
   *  =========================== */
  const BASE_PATH = window.location.pathname.includes("/city/") ? ".." : ".";
  document.querySelectorAll(".cityQuick").forEach((b) => {
    b.addEventListener("click", () => {
      const raw = b.dataset.city || b.textContent.trim();
      const cityName = normalizeKrCity(raw);
      const ci = new Date();
      ci.setDate(ci.getDate() + 1);
      const co = new Date();
      co.setDate(co.getDate() + 2);
      const fmt = (d) => d.toISOString().split("T")[0];
      location.href = `${BASE_PATH}/search.html?city=${encodeURIComponent(
        cityName
      )}&checkIn=${fmt(ci)}&checkOut=${fmt(co)}`;
    });
  });
}

/** ===========================
 *  üì¶ Ìò∏ÌÖî Î™©Î°ù Î†åÎçîÎßÅ
 *  =========================== */
export async function fetchAndRenderHotels(city, checkIn, checkOut, roomsParam) {
  const target = document.getElementById("hotelList") || document.getElementById("hotel-list");
  if (!target) return false;

  const match = TARGET_CITIES.find(
    (c) => c.display === city || c.name.toLowerCase() === city.toLowerCase()
  );
  const slug = match ? match.name : city;
  const BASE_PATH = window.location.pathname.includes("/city/") ? ".." : ".";
  
  let hotels = [];
  let useMock = true;

  try {
    // ‚úÖ roomsParam Ïö∞ÏÑ† ÏÇ¨Ïö©
    const storedRooms =
      roomsParam || JSON.parse(sessionStorage.getItem("searchRooms") || '[{"adults":2,"children":0,"childAges":[]}]');

    const payload = { city: slug, checkIn, checkOut, rooms: storedRooms };
    const apiRes = await fetch(`${API_BASE_URL}/api/hotels/search`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (apiRes.ok) {
      const apiData = await apiRes.json();
      if (apiData?.length) {
        hotels = apiData;
        useMock = false;
      }
    } else {
      console.warn("API ÏùëÎãµ Ïã§Ìå®:", apiRes.status);
    }
  } catch (e) {
    console.warn("API Ìò∏Ï∂ú Ïã§Ìå®, mock Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥:", e);
  }

  if (useMock) {
    try {
      const res = await fetch(`${BASE_PATH}/city-data/${slug.toLowerCase()}-top5.json`);
      const data = await res.json();
      hotels = data.topRated || [];
    } catch (e) {
      console.error("mock Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", e);
    }
  }

  if (!hotels.length) {
    target.innerHTML = "<p style='text-align:center;color:#777;'>ÌëúÏãúÌï† ÏàôÏÜåÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>";
    return false;
  }

  target.innerHTML = hotels
    .map(
      (h) => `
    <div class="hotel-card">
      <img loading="lazy" src="${h.image || "https://picsum.photos/seed/" + h.name + "/400/250"}" alt="${h.name}">
      <div class="hotel-info">
        <h3>${h.name}</h3>
        <p>üìç ${h.address || h.city}</p>
        <p>‚≠ê ${h.rating || "4.5"} / 5.0</p>
        <p class="price">üí∞ ${h.lowestPrice ? h.lowestPrice + "Ïõê~" : "ÏöîÍ∏à ÌôïÏù∏ Î∂àÍ∞Ä"}</p>
      </div>
    </div>
  `
    )
    .join("");

  return true;
}

/** ===========================
 *  üß© Partial Loader
 *  =========================== */
export async function loadPartial(targetId, path, callback) {
  try {
    const res = await fetch(path);
    if (!res.ok) throw new Error(`Failed to load ${path}`);
    const html = await res.text();
    const el = document.getElementById(targetId);
    if (el) el.innerHTML = html;
    if (callback) callback();
  } catch (err) {
    console.error("‚ùå partial load failed:", path, err);
  }
}

/** ===========================
 *  üìç city-map.json ÏûêÎèô Î°úÎìú
 *  =========================== */
const cityMapPath = window.location.pathname.includes("/city/")
  ? "../city-data/city-map.json"
  : "./city-data/city-map.json";

fetch(cityMapPath)
  .then((res) => res.json())
  .then((list) => {
    window.citySlugMap = Object.fromEntries(
      list.map((c) => [c.display, c.name.toLowerCase()])
    );
  })
  .catch((err) => console.warn("city-map.json Î°úÎìú Ïã§Ìå®:", err));
